/**
 * Generated by @openapi-codegen
 *
 * @version 2.0.0
 */
export type AddEntityToGroupBean = {
  groupid?: string;
  metaid?: string;
};

export type AddUserToGroupBean = {
  groupid?: string;
  role?: string;
  statusType?: string;
  userid?: string;
};

export type Address = {
  /**
   * Comment of the user when on commit
   *
   * @example Example of comment
   */
  changeComment?: string;
  /**
   * AUTOGENERATED - Timestamp when the last change happened
   *
   * @format date-time
   */
  changeTimestamp?: string;
  /**
   * The country of the address
   *
   * @example IT or Italy
   */
  country?: string;
  /**
   * The two-letter ISO 3166-1 alpha-2 country code (e.g., IT, UK).
   *
   * @example IT
   */
  countryCode?: string;
  /**
   * AUTOGENERATED - MetaId of the editor
   *
   * @example 342374275648
   */
  editorId?: string;
  /**
   * AUTOGENERATED - If ingested it contains from which file it was ingested.
   *
   * @example file://file.ttl
   */
  fileProvenance?: string;
  /**
   * list of group ids which the entity belong
   */
  groups?: string[];
  /**
   * AUTOGENERATED - InstanceId of the previous version of the instance
   *
   * @example 232465346363
   */
  instanceChangedId?: string;
  /**
   * InstanceId is the id of the instance
   *
   * @example 3482364872364782
   */
  instanceId?: string;
  /**
   * The locality in which the street address is, and which is in the region. For example, Mountain View
   *
   * @example Mountain View
   */
  locality?: string;
  /**
   * MetaId is the id of the entity, is the same across all the different instances
   *
   * @example 8423876238756278
   */
  metaId?: string;
  /**
   * Last operation type
   *
   * @example commit
   */
  operation?: string;
  /**
   * The postal code. For example, 94043.
   *
   * @example 94043
   */
  postalCode?: string;
  /**
   * State of the instance (DISCARDERD, ARCHIVED, DRAFT, SUBMITTED, PUBLISHED)
   *
   * @example John
   */
  status?: "ARCHIVED" | "DISCARDED" | "DRAFT" | "SUBMITTED" | "PUBLISHED";
  /**
   * The street address. For example, 1600 Amphitheatre Pkwy.
   *
   * @example 1600 Amphitheatre Pkwy
   */
  street?: string;
  /**
   * Mark an entity to be deleted when the fake instance in the approval process is published.
   *
   * @example true
   */
  toBeDelete?: string;
  uid?: string;
  /**
   * version tag
   *
   * @example 1.0
   */
  version?: string;
  /**
   * VersionId is the id of the instance
   *
   * @example 7346238746372
   */
  versionId?: string;
};

export type ApiResponseMessage = {
  /**
   * @format int32
   */
  code?: number;
  message?: string;
  type?: string;
};

export type AvailableContactPoints = {
  href?: string;
  type?: "ALL" | "DATAPROVIDERS" | "SERVICEPROVIDERS";
};

export type AvailableFormat = {
  format?: string;
  href?: string;
  label?: string;
  method?: string;
  originalFormat?: string;
  type?: "ORIGINAL" | "CONVERTED";
};

export type Category = {
  /**
   * Relates a list of resources CATEGORY
   *
   * @example {"entityType":"CATEGORY","instanceId":"an UUID","metaId":"an UUID","uid":"an UUID"}
   */
  broader?: LinkedEntity[];
  /**
   * Comment of the user when on commit
   *
   * @example Example of comment
   */
  changeComment?: string;
  /**
   * AUTOGENERATED - Timestamp when the last change happened
   *
   * @format date-time
   */
  changeTimestamp?: string;
  /**
   * This property contains a description of the category
   *
   * @example Refer to seismological events
   */
  description?: string;
  /**
   * AUTOGENERATED - MetaId of the editor
   *
   * @example 342374275648
   */
  editorId?: string;
  /**
   * AUTOGENERATED - If ingested it contains from which file it was ingested.
   *
   * @example file://file.ttl
   */
  fileProvenance?: string;
  /**
   * list of group ids which the entity belong
   */
  groups?: string[];
  inScheme?: LinkedEntity;
  /**
   * AUTOGENERATED - InstanceId of the previous version of the instance
   *
   * @example 232465346363
   */
  instanceChangedId?: string;
  /**
   * InstanceId is the id of the instance
   *
   * @example 3482364872364782
   */
  instanceId?: string;
  /**
   * MetaId is the id of the entity, is the same across all the different instances
   *
   * @example 8423876238756278
   */
  metaId?: string;
  /**
   * This property contains a preferred label of the category
   *
   * @example Seismological events
   */
  name?: string;
  /**
   * Relates a list of resources CATEGORY
   *
   * @example {"entityType":"CATEGORY","instanceId":"an UUID","metaId":"an UUID","uid":"an UUID"}
   */
  narrower?: LinkedEntity[];
  /**
   * Last operation type
   *
   * @example commit
   */
  operation?: string;
  /**
   * State of the instance (DISCARDERD, ARCHIVED, DRAFT, SUBMITTED, PUBLISHED)
   *
   * @example John
   */
  status?: "ARCHIVED" | "DISCARDED" | "DRAFT" | "SUBMITTED" | "PUBLISHED";
  /**
   * Mark an entity to be deleted when the fake instance in the approval process is published.
   *
   * @example true
   */
  toBeDelete?: string;
  /**
   * This property contains a preferred UUID of the category
   *
   * @example An UUID
   */
  uid?: string;
  /**
   * version tag
   *
   * @example 1.0
   */
  version?: string;
  /**
   * VersionId is the id of the instance
   *
   * @example 7346238746372
   */
  versionId?: string;
};

export type CategoryScheme = {
  /**
   * Comment of the user when on commit
   *
   * @example Example of comment
   */
  changeComment?: string;
  /**
   * AUTOGENERATED - Timestamp when the last change happened
   *
   * @format date-time
   */
  changeTimestamp?: string;
  /**
   * Code used by Data Portal
   *
   * @example ANT
   */
  code?: string;
  /**
   * Color used by Data Portal
   *
   * @example #06a8e2
   */
  color?: string;
  /**
   * This property contains a description of the category scheme.
   *
   * @example The domain of all seismological assets
   */
  description?: string;
  /**
   * AUTOGENERATED - MetaId of the editor
   *
   * @example 342374275648
   */
  editorId?: string;
  /**
   * AUTOGENERATED - If ingested it contains from which file it was ingested.
   *
   * @example file://file.ttl
   */
  fileProvenance?: string;
  /**
   * list of group ids which the entity belong
   */
  groups?: string[];
  /**
   * Homepage URL used by Data Portal
   *
   * @example https://homepage.com
   */
  homepage?: string;
  /**
   * AUTOGENERATED - InstanceId of the previous version of the instance
   *
   * @example 232465346363
   */
  instanceChangedId?: string;
  /**
   * InstanceId is the id of the instance
   *
   * @example 3482364872364782
   */
  instanceId?: string;
  /**
   * Logo URL used by Data Portal
   *
   * @example assets/img/logo/logo.png
   */
  logo?: string;
  /**
   * MetaId is the id of the entity, is the same across all the different instances
   *
   * @example 8423876238756278
   */
  metaId?: string;
  /**
   * Last operation type
   *
   * @example commit
   */
  operation?: string;
  /**
   * Order number of the categoryscheme on the Data Portal
   *
   * @example 1
   */
  orderitemnumber?: string;
  /**
   * State of the instance (DISCARDERD, ARCHIVED, DRAFT, SUBMITTED, PUBLISHED)
   *
   * @example John
   */
  status?: "ARCHIVED" | "DISCARDED" | "DRAFT" | "SUBMITTED" | "PUBLISHED";
  /**
   * This property contains a name of the category scheme.
   *
   * @example Seismology
   */
  title?: string;
  /**
   * Mark an entity to be deleted when the fake instance in the approval process is published.
   *
   * @example true
   */
  toBeDelete?: string;
  topConcepts?: LinkedEntity[];
  /**
   * This property contains a preferred UUID of the category
   *
   * @example An UUID
   */
  uid?: string;
  /**
   * version tag
   *
   * @example 1.0
   */
  version?: string;
  /**
   * VersionId is the id of the instance
   *
   * @example 7346238746372
   */
  versionId?: string;
};

export type Configuration = {
  configuration?: string;
  id?: string;
};

export type ContactPoint = {
  /**
   * Comment of the user when on commit
   *
   * @example Example of comment
   */
  changeComment?: string;
  /**
   * AUTOGENERATED - Timestamp when the last change happened
   *
   * @format date-time
   */
  changeTimestamp?: string;
  /**
   * AUTOGENERATED - MetaId of the editor
   *
   * @example 342374275648
   */
  editorId?: string;
  /**
   * This property refers to the Contact Point Email.
   *
   * @example email@email.com
   */
  email?: string[];
  /**
   * AUTOGENERATED - If ingested it contains from which file it was ingested.
   *
   * @example file://file.ttl
   */
  fileProvenance?: string;
  /**
   * list of group ids which the entity belong
   */
  groups?: string[];
  /**
   * AUTOGENERATED - InstanceId of the previous version of the instance
   *
   * @example 232465346363
   */
  instanceChangedId?: string;
  /**
   * InstanceId is the id of the instance
   *
   * @example 3482364872364782
   */
  instanceId?: string;
  /**
   * This property contains information about the language used by the Contact Point using the language codes from the IETF BCP 47 standard.
   *
   * @example en
   */
  language?: string[];
  /**
   * MetaId is the id of the entity, is the same across all the different instances
   *
   * @example 8423876238756278
   */
  metaId?: string;
  /**
   * Last operation type
   *
   * @example commit
   */
  operation?: string;
  organization?: LinkedEntity;
  person?: LinkedEntity;
  /**
   * This property refers to the Contact Point role.
   *
   * @example manager
   */
  role?: string;
  /**
   * State of the instance (DISCARDERD, ARCHIVED, DRAFT, SUBMITTED, PUBLISHED)
   *
   * @example John
   */
  status?: "ARCHIVED" | "DISCARDED" | "DRAFT" | "SUBMITTED" | "PUBLISHED";
  /**
   * This property refers to the Contact Point Telephone.
   *
   * @example +0039213123164
   */
  telephone?: string[];
  /**
   * Mark an entity to be deleted when the fake instance in the approval process is published.
   *
   * @example true
   */
  toBeDelete?: string;
  uid?: string;
  /**
   * version tag
   *
   * @example 1.0
   */
  version?: string;
  /**
   * VersionId is the id of the instance
   *
   * @example 7346238746372
   */
  versionId?: string;
};

export type Contacts = {
  email?: string[];
  name?: string;
  role?: string;
};

export type DataProduct = {
  /**
   * This property refers to information that indicates whether the Data Product is open data, has access restrictions or is not public.
   *
   * @example open data
   */
  accessRight?: string;
  /**
   * This property refers to the frequency at which the Data Product is updated.
   *
   * @example daily
   */
  accrualPeriodicity?: string;
  /**
   * This property refers to a category of the Data Product. A Data Product may be associated with multiple categories.
   *
   * @example {"entityType":"CATEGORY","instanceId":"an UUID","metaId":"an UUID","uid":"an UUID"}
   */
  category?: LinkedEntity[];
  /**
   * Comment of the user when on commit
   *
   * @example Example of comment
   */
  changeComment?: string;
  /**
   * AUTOGENERATED - Timestamp when the last change happened
   *
   * @format date-time
   */
  changeTimestamp?: string;
  /**
   * This property contains contact information (i.e. Role) that can be used for sending comments about the Data Product.
   *
   * @example {"entityType":"CONTACTPOINT","instanceId":"an UUID","metaId":"an UUID","uid":"an UUID"}
   */
  contactPoint?: LinkedEntity[];
  /**
   * This property contains the date on which the Data Product was created.
   *
   * @format date-time
   */
  created?: string;
  /**
   * This property contains a free-text account of the Data Product. This property can be repeated for parallel language versions of the description.
   *
   * @example Example description text
   */
  description?: string[];
  /**
   * This property links the Data Product to an available Distribution.
   *
   * @example {"entityType":"DISTRIBUTION","instanceId":"an UUID","metaId":"an UUID","uid":"an UUID"}
   */
  distribution?: LinkedEntity[];
  /**
   * This property refers to the Data Product documentation.
   *
   * @example URL to documentation
   */
  documentation?: string;
  /**
   * AUTOGENERATED - MetaId of the editor
   *
   * @example 342374275648
   */
  editorId?: string;
  /**
   * AUTOGENERATED - If ingested it contains from which file it was ingested.
   *
   * @example file://file.ttl
   */
  fileProvenance?: string;
  /**
   * list of group ids which the entity belong
   */
  groups?: string[];
  /**
   * This property refers to a related Data Product that is part of the described Data Product.
   *
   * @example {"entityType":"DATAPRODUCT","instanceId":"an UUID","metaId":"an UUID","uid":"an UUID"}
   */
  hasPart?: LinkedEntity[];
  /**
   * This property contains the single identifier of the DataProduct
   *
   * @example {"entityType":"IDENTIFIER","instanceId":"an UUID","metaId":"an UUID","uid":"an UUID"}
   */
  identifier?: LinkedEntity[];
  /**
   * AUTOGENERATED - InstanceId of the previous version of the instance
   *
   * @example 232465346363
   */
  instanceChangedId?: string;
  /**
   * InstanceId is the id of the instance
   *
   * @example 3482364872364782
   */
  instanceId?: string;
  /**
   * This property refers to a related Data Product in which the described Data Product is physically or logically included.
   *
   * @example {"entityType":"DATAPRODUCT","instanceId":"an UUID","metaId":"an UUID","uid":"an UUID"}
   */
  isPartOf?: LinkedEntity[];
  /**
   * This property contains the date of formal issuance (e.g., publication) of the Data Product.
   *
   * @format date-time
   */
  issued?: string;
  /**
   * This property contains a keyword or tag describing the Data Product. Multiple entries in a keywords list are typically delimited by commas.
   *
   * @example event,seismology,station
   */
  keywords?: string;
  landingPage?: string[];
  /**
   * MetaId is the id of the entity, is the same across all the different instances
   *
   * @example 8423876238756278
   */
  metaId?: string;
  /**
   * This property contains the most recent date on which the Data Product was changed or modified.
   *
   * @format date-time
   */
  modified?: string;
  /**
   * Last operation type
   *
   * @example commit
   */
  operation?: string;
  /**
   * This property contains a statement about the lineage of a Data Product
   *
   * @example some provenance url
   */
  provenance?: string[];
  /**
   * This property refers to an entity (organization) responsible for making the Data Product available.
   *
   * @example {"entityType":"ORGANIZATION","instanceId":"an UUID","metaId":"an UUID","uid":"an UUID"}
   */
  publisher?: LinkedEntity[];
  /**
   * This property refers to a qualifiedAttribution of the Data Product. A Data Product may be associated with multiple categories.
   *
   * @example {"entityType":"ATTRIBUTION","instanceId":"an UUID","metaId":"an UUID","uid":"an UUID"}
   */
  qualifiedAttribution?: LinkedEntity[];
  /**
   * This property refers to the URI which make available information about quality assurance of the Data Product.
   *
   * @example URL to quality assurance
   */
  qualityAssurance?: string;
  referencedBy?: string[];
  /**
   * It represents the link to another Epos resource.
   *
   * @example {"entityType":"ANY ENTITY TYPE","instanceId":"an UUID","metaId":"an UUID","uid":"an UUID"}
   */
  relation?: LinkedEntity[];
  /**
   * This property refers to a source Data Product that is part of the described Data Product.
   *
   * @example {"entityType":"DATAPRODUCT","instanceId":"an UUID","metaId":"an UUID","uid":"an UUID"}
   */
  source?: LinkedEntity[];
  /**
   * This property refers to a geographic region that is covered by the Data Product.
   *
   * @example {"entityType":"LOCATION","instanceId":"an UUID","metaId":"an UUID","uid":"an UUID"}
   */
  spatialExtent?: LinkedEntity[];
  /**
   * State of the instance (DISCARDERD, ARCHIVED, DRAFT, SUBMITTED, PUBLISHED)
   *
   * @example John
   */
  status?: "ARCHIVED" | "DISCARDED" | "DRAFT" | "SUBMITTED" | "PUBLISHED";
  /**
   * This property refers to a temporal period (i.e. startDate, endDate) that the Data Product covers.
   *
   * @example {"entityType":"PERIODOFTIME","instanceId":"an UUID","metaId":"an UUID","uid":"an UUID"}
   */
  temporalExtent?: LinkedEntity[];
  /**
   * This property contains a name given to the Data Product. This property can be repeated for parallel language versions of the name.
   *
   * @example Some DataProduct name
   */
  title?: string[];
  /**
   * Mark an entity to be deleted when the fake instance in the approval process is published.
   *
   * @example true
   */
  toBeDelete?: string;
  /**
   * This property refers to the type of the Data Product. A controlled vocabulary for the values has not been established.
   *
   * @example http://purl.org/dc/dcmitype/Collection
   */
  type?: string;
  uid?: string;
  variableMeasured?: string[];
  /**
   * version tag
   *
   * @example 1.0
   */
  version?: string;
  /**
   * VersionId is the id of the instance
   *
   * @example 7346238746372
   */
  versionId?: string;
  /**
   * This property contains a version number or other version designation of the Data Product.
   *
   * @example 1.0
   */
  versionInfo?: string;
};

export type DataServiceProvider = {
  country?: string;
  dataProviderLegalName?: string;
  dataProviderUrl?: string;
  instanceid?: string;
  metaid?: string;
  uid?: string;
};

export type DiscoveryItem = {
  availableFormats?: AvailableFormat[];
  categories?: string[];
  /**
   * @format date-time
   */
  changeDate?: string;
  /**
   * @uniqueItems true
   */
  dataprovider?: string[];
  description?: string;
  editorFullName?: string;
  editorId?: string;
  /**
   * @uniqueItems true
   */
  facilityprovider?: string[];
  href?: string;
  hrefExtended?: string;
  id?: string;
  metaId?: string;
  /**
   * @uniqueItems true
   */
  serviceprovider?: string[];
  sha256id?: string;
  /**
   * @format int32
   */
  status?: number;
  statusTimestamp?: string;
  title?: string;
  uid?: string;
  versioningStatus?: string;
};

export type Distribution = {
  /**
   * This property refers to the WebService which supports selection of an extract, sub-set, or combination of data
   *
   * @example {"entityType":"WEBSERVICE","instanceId":"an UUID","metaId":"an UUID","uid":"an UUID"}
   */
  accessService?: LinkedEntity[];
  /**
   * his property refers to the URL which supports selection of an extract, sub-set, or combination of data
   *
   * @example https://accessurl
   */
  accessURL?: string[];
  availableContactPoints?: AvailableContactPoints[];
  availableFormats?: AvailableFormat[];
  /**
   * This property refers to the byteSize.
   *
   * @example byteSize
   */
  byteSize?: string;
  categories?: Node;
  /**
   * Comment of the user when on commit
   *
   * @example Example of comment
   */
  changeComment?: string;
  /**
   * AUTOGENERATED - Timestamp when the last change happened
   *
   * @format date-time
   */
  changeTimestamp?: string;
  /**
   * This property refers to the Data Policy URI.
   *
   * @example URL to datapolicy
   */
  dataPolicy?: string;
  /**
   * Reverse reference to the related dataproduct.
   *
   * @example {"entityType":"DATAPRODUCT","instanceId":"an UUID","metaId":"an UUID","uid":"an UUID"}
   */
  dataProduct?: LinkedEntity[];
  dataProvider?: DataServiceProvider[];
  /**
   * This property contains a free-text account of the Distribution. This property can be repeated for parallel language versions of the description.
   *
   * @example Description of the distribution
   */
  description?: string[];
  distributionid?: string;
  doi?: string[];
  /**
   * This property contains a URL that is a direct link to a downloadable file in a given format.
   *
   * @example https://downloadurl
   */
  downloadURL?: string[];
  /**
   * AUTOGENERATED - MetaId of the editor
   *
   * @example 342374275648
   */
  editorId?: string;
  endpoint?: string;
  errorMessage?: string;
  /**
   * AUTOGENERATED - If ingested it contains from which file it was ingested.
   *
   * @example file://file.ttl
   */
  fileProvenance?: string;
  /**
   * This property refers to the type of the Distribution. A controlled vocabulary for the values has not been established.
   *
   * @example http://publications.europa.eu/resource/authority/file-type/BIN
   */
  format?: string;
  frequencyUpdate?: string;
  /**
   * list of group ids which the entity belong
   */
  groups?: string[];
  href?: string;
  hrefExtended?: string;
  id?: string;
  /**
   * AUTOGENERATED - InstanceId of the previous version of the instance
   *
   * @example 232465346363
   */
  instanceChangedId?: string;
  /**
   * InstanceId is the id of the instance
   *
   * @example 3482364872364782
   */
  instanceId?: string;
  internalID?: string[];
  /**
   * This property contains the date of formal issuance (e.g., publication) of the Distribution.
   *
   * @format date-time
   */
  issued?: string;
  keywords?: string[];
  /**
   * This property refers to the licence under which the Distribution is made available.
   *
   * @example Apache 2.0
   */
  licence?: string;
  license?: string;
  /**
   * This property refers to the maturity.
   *
   * @example maturity
   */
  maturity?: string;
  /**
   * This property refers to the mediaType URI.
   *
   * @example URL to mediaType
   */
  mediaType?: string;
  /**
   * MetaId is the id of the entity, is the same across all the different instances
   *
   * @example 8423876238756278
   */
  metaId?: string;
  /**
   * This property contains the most recent date on which the Distribution was changed or modified.
   *
   * @format date-time
   */
  modified?: string;
  /**
   * Last operation type
   *
   * @example commit
   */
  operation?: string;
  operationid?: string;
  parameters?: ServiceParameter[];
  productid?: string;
  qualityAssurance?: string;
  scienceDomain?: string[];
  serviceDescription?: string;
  serviceDocumentation?: string;
  serviceEndpoint?: string;
  serviceName?: string;
  serviceProvider?: DataServiceProvider;
  serviceSpatial?: SpatialInfo;
  serviceTemporalCoverage?: TemporalCoverage;
  serviceType?: string[];
  spatial?: SpatialInfo;
  /**
   * State of the instance (DISCARDERD, ARCHIVED, DRAFT, SUBMITTED, PUBLISHED)
   *
   * @example John
   */
  status?: "ARCHIVED" | "DISCARDED" | "DRAFT" | "SUBMITTED" | "PUBLISHED";
  /**
   * This property refers to the WebService which supports selection of an extract, sub-set, or combination of data
   *
   * @example {"entityType":"OPERATION","instanceId":"an UUID","metaId":"an UUID","uid":"an UUID"}
   */
  supportedOperation?: LinkedEntity[];
  temporalCoverage?: TemporalCoverage;
  /**
   * This property contains a name given to the Distribution. This property can be repeated for parallel language versions of the description.
   *
   * @example Name of distribution
   */
  title?: string[];
  /**
   * Mark an entity to be deleted when the fake instance in the approval process is published.
   *
   * @example true
   */
  toBeDelete?: string;
  /**
   * This property refers to the type of the Distribution.
   *
   * @example http://publications.europa.eu/resource/authority/distribution-type/WEB_SERVICE
   */
  type?: string;
  uid?: string;
  /**
   * version tag
   *
   * @example 1.0
   */
  version?: string;
  /**
   * VersionId is the id of the instance
   *
   * @example 7346238746372
   */
  versionId?: string;
  versioningStatus?:
    | "ARCHIVED"
    | "DISCARDED"
    | "DRAFT"
    | "SUBMITTED"
    | "PUBLISHED";
};

export type Documentation = {
  /**
   * Comment of the user when on commit
   *
   * @example Example of comment
   */
  changeComment?: string;
  /**
   * AUTOGENERATED - Timestamp when the last change happened
   *
   * @format date-time
   */
  changeTimestamp?: string;
  /**
   * Documentation description
   *
   * @example Documentation description text
   */
  description?: string;
  /**
   * AUTOGENERATED - MetaId of the editor
   *
   * @example 342374275648
   */
  editorId?: string;
  /**
   * AUTOGENERATED - If ingested it contains from which file it was ingested.
   *
   * @example file://file.ttl
   */
  fileProvenance?: string;
  /**
   * list of group ids which the entity belong
   */
  groups?: string[];
  /**
   * AUTOGENERATED - InstanceId of the previous version of the instance
   *
   * @example 232465346363
   */
  instanceChangedId?: string;
  /**
   * InstanceId is the id of the instance
   *
   * @example 3482364872364782
   */
  instanceId?: string;
  /**
   * MetaId is the id of the entity, is the same across all the different instances
   *
   * @example 8423876238756278
   */
  metaId?: string;
  /**
   * Last operation type
   *
   * @example commit
   */
  operation?: string;
  /**
   * State of the instance (DISCARDERD, ARCHIVED, DRAFT, SUBMITTED, PUBLISHED)
   *
   * @example John
   */
  status?: "ARCHIVED" | "DISCARDED" | "DRAFT" | "SUBMITTED" | "PUBLISHED";
  /**
   * Documentation title
   *
   * @example Documentation title
   */
  title?: string;
  /**
   * Mark an entity to be deleted when the fake instance in the approval process is published.
   *
   * @example true
   */
  toBeDelete?: string;
  uid?: string;
  /**
   * Documentation url
   *
   * @example URL
   */
  uri?: string;
  /**
   * version tag
   *
   * @example 1.0
   */
  version?: string;
  /**
   * VersionId is the id of the instance
   *
   * @example 7346238746372
   */
  versionId?: string;
};

export type Element = {
  /**
   * Comment of the user when on commit
   *
   * @example Example of comment
   */
  changeComment?: string;
  /**
   * AUTOGENERATED - Timestamp when the last change happened
   *
   * @format date-time
   */
  changeTimestamp?: string;
  /**
   * AUTOGENERATED - MetaId of the editor
   *
   * @example 342374275648
   */
  editorId?: string;
  /**
   * AUTOGENERATED - If ingested it contains from which file it was ingested.
   *
   * @example file://file.ttl
   */
  fileProvenance?: string;
  /**
   * list of group ids which the entity belong
   */
  groups?: string[];
  /**
   * AUTOGENERATED - InstanceId of the previous version of the instance
   *
   * @example 232465346363
   */
  instanceChangedId?: string;
  /**
   * InstanceId is the id of the instance
   *
   * @example 3482364872364782
   */
  instanceId?: string;
  /**
   * MetaId is the id of the entity, is the same across all the different instances
   *
   * @example 8423876238756278
   */
  metaId?: string;
  /**
   * Last operation type
   *
   * @example commit
   */
  operation?: string;
  /**
   * State of the instance (DISCARDERD, ARCHIVED, DRAFT, SUBMITTED, PUBLISHED)
   *
   * @example John
   */
  status?: "ARCHIVED" | "DISCARDED" | "DRAFT" | "SUBMITTED" | "PUBLISHED";
  /**
   * Mark an entity to be deleted when the fake instance in the approval process is published.
   *
   * @example true
   */
  toBeDelete?: string;
  /**
   * This property refers to the type of an element ('TELEPHONE', 'EMAIL', 'LANGUAGE', 'DOWNLOADURL', 'ACCESSURL','DOCUMENTATION', 'RETURNS', 'PARAMVALUE', 'PROGRAMMINGLANGUAGE', 'PAGEURL')
   *
   * @example PAGEURL
   */
  type?:
    | "TELEPHONE"
    | "EMAIL"
    | "LANGUAGE"
    | "DOWNLOADURL"
    | "ACCESSURL"
    | "DOCUMENTATION"
    | "RETURNS"
    | "PARAMVALUE"
    | "PROGRAMMINGLANGUAGE"
    | "PAGEURL"
    | "CITATION"
    | "OPERATINGSYSTEM"
    | "REFERENCEDBY"
    | "LANDINGPAGE"
    | "VARIABLEMEASURED";
  uid?: string;
  /**
   * This property refers to the value of an element
   *
   * @example http://pageurl
   */
  value?: string;
  /**
   * version tag
   *
   * @example 1.0
   */
  version?: string;
  /**
   * VersionId is the id of the instance
   *
   * @example 7346238746372
   */
  versionId?: string;
};

export type Email = {
  bodyText?: string;
  subject?: string;
};

export type Environment = {
  accessurl?: string;
  additionalInformation?: string;
  created?: string;
  description?: string;
  environmentid?: string;
  name?: string;
  resources?: ItemInfo[];
  serviceid?: string;
  status?: "READY" | "CREATING" | "UPDATING" | "DELETING" | "NOT_READY";
  unitid?: string;
  updated?: string;
  userid?: string;
};

export type EnvironmentCreated = {
  accessURL?: string;
  description?: string;
  environmentid?: string;
  name?: string;
};

export type EnvironmentDeleted = {
  accessURL?: string;
  description?: string;
  environmentid?: string;
  name?: string;
};

export type EposStyleObject = {
  label?: string;
  marker?: Marker;
};

export type Equipment = {
  category?: LinkedEntity[];
  /**
   * Comment of the user when on commit
   *
   * @example Example of comment
   */
  changeComment?: string;
  /**
   * AUTOGENERATED - Timestamp when the last change happened
   *
   * @format date-time
   */
  changeTimestamp?: string;
  contactPoint?: LinkedEntity[];
  description?: string;
  dynamicRange?: string;
  /**
   * AUTOGENERATED - MetaId of the editor
   *
   * @example 342374275648
   */
  editorId?: string;
  /**
   * AUTOGENERATED - If ingested it contains from which file it was ingested.
   *
   * @example file://file.ttl
   */
  fileProvenance?: string;
  filter?: string;
  /**
   * list of group ids which the entity belong
   */
  groups?: string[];
  identifier?: string;
  /**
   * AUTOGENERATED - InstanceId of the previous version of the instance
   *
   * @example 232465346363
   */
  instanceChangedId?: string;
  /**
   * InstanceId is the id of the instance
   *
   * @example 3482364872364782
   */
  instanceId?: string;
  isPartOf?: LinkedEntity[];
  keywords?: string;
  manufacturer?: LinkedEntity;
  /**
   * MetaId is the id of the entity, is the same across all the different instances
   *
   * @example 8423876238756278
   */
  metaId?: string;
  name?: string;
  /**
   * Last operation type
   *
   * @example commit
   */
  operation?: string;
  orientation?: string;
  pageURL?: string;
  relation?: LinkedEntity[];
  resolution?: string;
  samplePeriod?: string;
  serialNumber?: string;
  spatialExtent?: LinkedEntity[];
  /**
   * State of the instance (DISCARDERD, ARCHIVED, DRAFT, SUBMITTED, PUBLISHED)
   *
   * @example John
   */
  status?: "ARCHIVED" | "DISCARDED" | "DRAFT" | "SUBMITTED" | "PUBLISHED";
  temporalExtent?: LinkedEntity[];
  /**
   * Mark an entity to be deleted when the fake instance in the approval process is published.
   *
   * @example true
   */
  toBeDelete?: string;
  type?: string;
  uid?: string;
  /**
   * version tag
   *
   * @example 1.0
   */
  version?: string;
  /**
   * VersionId is the id of the instance
   *
   * @example 7346238746372
   */
  versionId?: string;
};

export type Facility = {
  availableContactPoints?: AvailableContactPoints[];
  availableFormats?: AvailableFormat[];
  categories?: Node;
  dataProvider?: DataServiceProvider[];
  description?: string;
  errorMessage?: string;
  facilityid?: string;
  href?: string;
  id?: string;
  internalID?: string[];
  keywords?: string[];
  operationid?: string;
  page?: string[];
  serviceParameters?: ServiceParameter[];
  serviceType?: string[];
  serviceid?: string;
  spatial?: SpatialInfo;
  title?: string;
  type?: string;
  uid?: string;
};

export type Feature = {
  geometry?: Geometry;
  type?: string;
};

export type FeaturesCollection = {
  features?: Feature[];
  styles?: {
    [key: string]: EposStyleObject;
  };
  type?: string;
};

export type Geometry = {
  type?:
    | "GEOMETRY_COLLECTION"
    | "LINE_STRING"
    | "MULTI_LINE_STRING"
    | "MULTI_POINT"
    | "MULTI_POLYGON"
    | "POINT"
    | "POLYGON";
};

export type Group = {
  /**
   * This property refers to the description of a group
   *
   * @example group description text
   */
  description?: string;
  /**
   * This property refers to the list of entities id of a group
   *
   * @example entitymetaid
   */
  entities?: string[];
  /**
   * This property refers to the id of a group
   *
   * @example 83823482374823f
   */
  id?: string;
  /**
   * This property refers to the name of a group
   *
   * @example group name
   */
  name?: string;
  /**
   * This property refers to the list of users id of a group
   *
   * @example authidentifier
   */
  users?: {
    [key: string]: string;
  }[];
};

export type Identifier = {
  /**
   * Comment of the user when on commit
   *
   * @example Example of comment
   */
  changeComment?: string;
  /**
   * AUTOGENERATED - Timestamp when the last change happened
   *
   * @format date-time
   */
  changeTimestamp?: string;
  /**
   * AUTOGENERATED - MetaId of the editor
   *
   * @example 342374275648
   */
  editorId?: string;
  /**
   * AUTOGENERATED - If ingested it contains from which file it was ingested.
   *
   * @example file://file.ttl
   */
  fileProvenance?: string;
  /**
   * list of group ids which the entity belong
   */
  groups?: string[];
  /**
   * This property contains a string that is an identifier in the context of the identifier scheme referenced by its datatype
   *
   * @example 273129314
   */
  identifier?: string;
  /**
   * AUTOGENERATED - InstanceId of the previous version of the instance
   *
   * @example 232465346363
   */
  instanceChangedId?: string;
  /**
   * InstanceId is the id of the instance
   *
   * @example 3482364872364782
   */
  instanceId?: string;
  /**
   * MetaId is the id of the entity, is the same across all the different instances
   *
   * @example 8423876238756278
   */
  metaId?: string;
  /**
   * Last operation type
   *
   * @example commit
   */
  operation?: string;
  /**
   * State of the instance (DISCARDERD, ARCHIVED, DRAFT, SUBMITTED, PUBLISHED)
   *
   * @example John
   */
  status?: "ARCHIVED" | "DISCARDED" | "DRAFT" | "SUBMITTED" | "PUBLISHED";
  /**
   * Mark an entity to be deleted when the fake instance in the approval process is published.
   *
   * @example true
   */
  toBeDelete?: string;
  /**
   * This property refers the identifier scheme referenced by its datatype (e.g., DDSS-ID, DOI, etc.).
   *
   * @example DOI
   */
  type?: string;
  uid?: string;
  /**
   * version tag
   *
   * @example 1.0
   */
  version?: string;
  /**
   * VersionId is the id of the instance
   *
   * @example 7346238746372
   */
  versionId?: string;
};

export type ItemInfo = {
  description?: string;
  format?: string;
  itemid?: string;
  name?: string;
  resourceid?: string;
  status?: "LOADED" | "NOT_LOADED";
  url?: string;
  version?: string;
};

export type JobCreated = {
  environmentid?: string;
  message?: string;
};

export type KeyCreated = {
  key: string;
};

/**
 * It represents the link to another Epos resource.
 *
 * @example {"entityType":"ANY ENTITY","instanceId":"an UUID","metaId":"an UUID","uid":"an UUID"}
 */
export type LinkedEntity = {
  /**
   * The entity type of the related instance in upper case (e.g. DataProduct, Equipment...)
   *
   * @example ORGANIZATION
   */
  entityType?: string;
  /**
   * The instanceId of the related instance, it can be used to precisely refer to the ote instance
   *
   * @example 12414324252352
   */
  instanceId?: string;
  /**
   * The metaId of the related instance
   *
   * @example 12414324252352
   */
  metaId?: string;
  /**
   * The uid of the related instance.
   *
   * @example 12414324252352
   */
  uid?: string;
};

export type LinkedResponse = {
  /**
   * @uniqueItems true
   */
  items?: DiscoveryItem[];
};

export type ListOfServices = {
  services?: Service[];
  type?: string;
};

export type Location = {
  /**
   * Comment of the user when on commit
   *
   * @example Example of comment
   */
  changeComment?: string;
  /**
   * AUTOGENERATED - Timestamp when the last change happened
   *
   * @format date-time
   */
  changeTimestamp?: string;
  /**
   * AUTOGENERATED - MetaId of the editor
   *
   * @example 342374275648
   */
  editorId?: string;
  /**
   * AUTOGENERATED - If ingested it contains from which file it was ingested.
   *
   * @example file://file.ttl
   */
  fileProvenance?: string;
  /**
   * list of group ids which the entity belong
   */
  groups?: string[];
  /**
   * AUTOGENERATED - InstanceId of the previous version of the instance
   *
   * @example 232465346363
   */
  instanceChangedId?: string;
  /**
   * InstanceId is the id of the instance
   *
   * @example 3482364872364782
   */
  instanceId?: string;
  /**
   * This property associates any resource with the corresponding geometry.
   *
   * @example POLYGON(....)
   */
  location?: string;
  /**
   * MetaId is the id of the entity, is the same across all the different instances
   *
   * @example 8423876238756278
   */
  metaId?: string;
  /**
   * Last operation type
   *
   * @example commit
   */
  operation?: string;
  /**
   * State of the instance (DISCARDERD, ARCHIVED, DRAFT, SUBMITTED, PUBLISHED)
   *
   * @example John
   */
  status?: "ARCHIVED" | "DISCARDED" | "DRAFT" | "SUBMITTED" | "PUBLISHED";
  /**
   * Mark an entity to be deleted when the fake instance in the approval process is published.
   *
   * @example true
   */
  toBeDelete?: string;
  uid?: string;
  /**
   * version tag
   *
   * @example 1.0
   */
  version?: string;
  /**
   * VersionId is the id of the instance
   *
   * @example 7346238746372
   */
  versionId?: string;
};

export type Mapping = {
  /**
   * Comment of the user when on commit
   *
   * @example Example of comment
   */
  changeComment?: string;
  /**
   * AUTOGENERATED - Timestamp when the last change happened
   *
   * @format date-time
   */
  changeTimestamp?: string;
  /**
   * This property contains the default value of the parameter.
   *
   * @example 15
   */
  defaultValue?: string;
  /**
   * AUTOGENERATED - MetaId of the editor
   *
   * @example 342374275648
   */
  editorId?: string;
  /**
   * AUTOGENERATED - If ingested it contains from which file it was ingested.
   *
   * @example file://file.ttl
   */
  fileProvenance?: string;
  /**
   * list of group ids which the entity belong
   */
  groups?: string[];
  /**
   * This property contains the healthCheckVariable of the parameter as required by web service specifications for monitoring.
   *
   * @example eventid
   */
  healthCheckVariable?: string;
  /**
   * AUTOGENERATED - InstanceId of the previous version of the instance
   *
   * @example 232465346363
   */
  instanceChangedId?: string;
  /**
   * InstanceId is the id of the instance
   *
   * @example 3482364872364782
   */
  instanceId?: string;
  /**
   * This property contains a short string used to describe the meaning of the parameter.
   *
   * @example Parameter label
   */
  label?: string;
  /**
   * This property contains the maximum value of the parameter.
   *
   * @example 20
   */
  maxValue?: string;
  /**
   * MetaId is the id of the entity, is the same across all the different instances
   *
   * @example 8423876238756278
   */
  metaId?: string;
  /**
   * This property contains the minimum value of the parameter.
   *
   * @example 12
   */
  minValue?: string;
  /**
   * This property is a boolean property that describe if the mapping has multiple values.
   *
   * @example true
   */
  multipleValues?: string;
  /**
   * Last operation type
   *
   * @example commit
   */
  operation?: string;
  /**
   * This property contains one of the possible values which should be used in the web service query. It could be repeated as many times as needed.
   *
   * @example val1
   */
  paramValue?: string[];
  /**
   * This property contains the vocabulary term which indicates the semantic description of parameter.
   *
   * @example schema:endDate
   */
  property?: string;
  /**
   * This property contains the type of parameter
   *
   * @example string
   */
  range?: string;
  /**
   * This property is a boolean property which if is marked as true means that the parameters need to be set but it isn't showed on the gui and the user cannot interact with it
   *
   * @example true
   */
  readOnlyValue?: string;
  /**
   * This property contains true if the property is required, false otherwise.
   *
   * @example true
   */
  required?: string;
  /**
   * State of the instance (DISCARDERD, ARCHIVED, DRAFT, SUBMITTED, PUBLISHED)
   *
   * @example John
   */
  status?: "ARCHIVED" | "DISCARDED" | "DRAFT" | "SUBMITTED" | "PUBLISHED";
  /**
   * Mark an entity to be deleted when the fake instance in the approval process is published.
   *
   * @example true
   */
  toBeDelete?: string;
  uid?: string;
  /**
   * This property contains the regular expression for testing values according to the parameters specification.
   *
   * @example yyyy-MM-dd
   */
  valuePattern?: string;
  /**
   * This property contains the name of the parameter as required by web service specifications.
   *
   * @example eventid
   */
  variable?: string;
  /**
   * version tag
   *
   * @example 1.0
   */
  version?: string;
  /**
   * VersionId is the id of the instance
   *
   * @example 7346238746372
   */
  versionId?: string;
};

export type Marker = {
  anchor?: "N" | "NE" | "E" | "SE" | "S" | "SW" | "W" | "NW" | "C";
  character?: string;
  clustering?: boolean;
  fontawesome_class?: string;
  href?: string;
  pin?: boolean;
};

export type ModelConfiguration = {
  configuration: string;
  id?: string;
};

export type MonitoringBean = {
  /**
   * @uniqueItems true
   */
  contactPoints?: Contacts[];
  id?: string;
  identifier?: string;
  name?: string;
  originalURL?: string;
  tcsgroup?: string;
  uid?: string;
  /**
   * @uniqueItems true
   */
  validationRules?: ValidationRule[];
};

export type Node = {
  children?: Node[];
  code?: string;
  color?: string;
  ddss?: string;
  distributions?: DiscoveryItem[];
  id?: string;
  imgUrl?: string;
  linkUrl?: string;
  name?: string;
};

export type NodeFilters = {
  children?: NodeFilters[];
  id?: string;
  name?: string;
};

export type Ontology = {
  content?: string;
  /**
   * @maxLength 100
   * @minLength 0
   */
  id?: string;
  /**
   * @maxLength 1024
   * @minLength 0
   */
  name?: string;
  /**
   * @maxLength 1024
   * @minLength 0
   */
  type?: string;
};

export type Operation = {
  /**
   * Comment of the user when on commit
   *
   * @example Example of comment
   */
  changeComment?: string;
  /**
   * AUTOGENERATED - Timestamp when the last change happened
   *
   * @format date-time
   */
  changeTimestamp?: string;
  /**
   * AUTOGENERATED - MetaId of the editor
   *
   * @example 342374275648
   */
  editorId?: string;
  /**
   * AUTOGENERATED - If ingested it contains from which file it was ingested.
   *
   * @example file://file.ttl
   */
  fileProvenance?: string;
  /**
   * list of group ids which the entity belong
   */
  groups?: string[];
  /**
   * AUTOGENERATED - InstanceId of the previous version of the instance
   *
   * @example 232465346363
   */
  instanceChangedId?: string;
  /**
   * InstanceId is the id of the instance
   *
   * @example 3482364872364782
   */
  instanceId?: string;
  iriTemplate?: LinkedEntity;
  /**
   * A variable-to-property mapping of the IRI template.
   *
   * @example {"entityType":"MAPPING","instanceId":"an UUID","metaId":"an UUID","uid":"an UUID"}
   */
  mapping?: LinkedEntity[];
  /**
   * Reverse reference to the related webservice.
   *
   * @example {"entityType":"WEBSERVICE","instanceId":"an UUID","metaId":"an UUID","uid":"an UUID"}
   */
  maturity?: LinkedEntity[];
  /**
   * MetaId is the id of the entity, is the same across all the different instances
   *
   * @example 8423876238756278
   */
  metaId?: string;
  /**
   * The HTTP method.
   *
   * @example GET
   */
  method?: string;
  /**
   * Last operation type
   *
   * @example commit
   */
  operation?: string;
  /**
   * This property is used to specify the output format of the Operation. The possible values are listed here: https://www.iana.org/assignments/media-types/media-types.xhtml
   *
   * @example application/json
   */
  returns?: string[];
  /**
   * State of the instance (DISCARDERD, ARCHIVED, DRAFT, SUBMITTED, PUBLISHED)
   *
   * @example John
   */
  status?: "ARCHIVED" | "DISCARDED" | "DRAFT" | "SUBMITTED" | "PUBLISHED";
  /**
   * The syntax of the template literal is specified by the [RFC6570] URI Template syntax..
   *
   * @example http://urltoservice{?param1,param2,param3}
   */
  template?: string;
  /**
   * Mark an entity to be deleted when the fake instance in the approval process is published.
   *
   * @example true
   */
  toBeDelete?: string;
  uid?: string;
  /**
   * version tag
   *
   * @example 1.0
   */
  version?: string;
  /**
   * VersionId is the id of the instance
   *
   * @example 7346238746372
   */
  versionId?: string;
};

export type Organization = {
  /**
   * This property contains the Organization acronym (e.g., INGV).
   *
   * @example INGV
   */
  acronym?: string;
  address?: LinkedEntity;
  /**
   * Comment of the user when on commit
   *
   * @example Example of comment
   */
  changeComment?: string;
  /**
   * AUTOGENERATED - Timestamp when the last change happened
   *
   * @format date-time
   */
  changeTimestamp?: string;
  /**
   * This property refers to the Contact Point (i.e. Role) defined for the Organization
   *
   * @example {"entityType":"CONTACTPOINT","instanceId":"an UUID","metaId":"an UUID","uid":"an UUID"}
   */
  contactPoint?: LinkedEntity[];
  /**
   * AUTOGENERATED - MetaId of the editor
   *
   * @example 342374275648
   */
  editorId?: string;
  /**
   * This property contains the email address of the Organization.
   *
   * @example email@email.com
   */
  email?: string[];
  /**
   * AUTOGENERATED - If ingested it contains from which file it was ingested.
   *
   * @example file://file.ttl
   */
  fileProvenance?: string;
  /**
   * list of group ids which the entity belong
   */
  groups?: string[];
  /**
   * This property contains an identifier for the Organization (e.g., PIC, ISNI, etc.).
   *
   * @example {"entityType":"IDENTIFIER","instanceId":"an UUID","metaId":"an UUID","uid":"an UUID"}
   */
  identifier?: LinkedEntity[];
  /**
   * AUTOGENERATED - InstanceId of the previous version of the instance
   *
   * @example 232465346363
   */
  instanceChangedId?: string;
  /**
   * InstanceId is the id of the instance
   *
   * @example 3482364872364782
   */
  instanceId?: string;
  /**
   * This property contains the Organization legalname (e.g., Istituto Nazionale di Geofisica e Vulcanologia).
   *
   * @example  Istituto Nazionale di Geofisica e Vulcanologia
   */
  legalName?: string[];
  /**
   * This property contains the Organization identifier that uniquely identifies a legal entity as defined in ISO 17442.
   *
   * @example CODE
   */
  leiCode?: string;
  /**
   * This property contains the URL of the Organization logo.
   *
   * @example http://urltologo
   */
  logo?: string;
  /**
   * TThis property contains information about the status of the Organization with respect to EPOS (e.g., existing TCS, candidate TCS, external service). A controlled list for the values should be established.
   *
   * @example some maturity value
   */
  maturity?: string;
  /**
   * This property refers to an Organization to which this Organization belongs.
   *
   * @example {"entityType":"ORGANIZATION","instanceId":"an UUID","metaId":"an UUID","uid":"an UUID"}
   */
  memberOf?: LinkedEntity[];
  /**
   * MetaId is the id of the entity, is the same across all the different instances
   *
   * @example 8423876238756278
   */
  metaId?: string;
  /**
   * Last operation type
   *
   * @example commit
   */
  operation?: string;
  /**
   * This property refers to a Facility or Equipment of which it is the owner.
   *
   * @example {"entityType":"EQUIPMENT or FACILITY","instanceId":"an UUID","metaId":"an UUID","uid":"an UUID"}
   */
  owns?: LinkedEntity[];
  /**
   * State of the instance (DISCARDERD, ARCHIVED, DRAFT, SUBMITTED, PUBLISHED)
   *
   * @example John
   */
  status?: "ARCHIVED" | "DISCARDED" | "DRAFT" | "SUBMITTED" | "PUBLISHED";
  /**
   * This property contains the telephone number of the Organization.
   *
   * @example +003912414324
   */
  telephone?: string[];
  /**
   * Mark an entity to be deleted when the fake instance in the approval process is published.
   *
   * @example true
   */
  toBeDelete?: string;
  /**
   * This property refers to the type of Organization (e.g., TCS, TCS internal consortia, independent (INTERMAGNET), national EPOS consortia). A controlled list for the values should be established.
   *
   * @example TCS
   */
  type?: string;
  uid?: string;
  url?: string;
  /**
   * version tag
   *
   * @example 1.0
   */
  version?: string;
  /**
   * VersionId is the id of the instance
   *
   * @example 7346238746372
   */
  versionId?: string;
};

export type OrganizationBean = {
  country?: string;
  id?: string;
  logo?: string;
  name?: string;
  url?: string;
};

export type Parameter = {
  label?: string;
  property?: string;
};

export type ParametersResponse = {
  /**
   * @uniqueItems true
   */
  items?: Parameter[];
};

export type PeriodOfTime = {
  /**
   * Comment of the user when on commit
   *
   * @example Example of comment
   */
  changeComment?: string;
  /**
   * AUTOGENERATED - Timestamp when the last change happened
   *
   * @format date-time
   */
  changeTimestamp?: string;
  /**
   * AUTOGENERATED - MetaId of the editor
   *
   * @example 342374275648
   */
  editorId?: string;
  /**
   * This property contains the END of the period
   *
   * @format date-time
   */
  endDate?: string;
  /**
   * AUTOGENERATED - If ingested it contains from which file it was ingested.
   *
   * @example file://file.ttl
   */
  fileProvenance?: string;
  /**
   * list of group ids which the entity belong
   */
  groups?: string[];
  /**
   * AUTOGENERATED - InstanceId of the previous version of the instance
   *
   * @example 232465346363
   */
  instanceChangedId?: string;
  /**
   * InstanceId is the id of the instance
   *
   * @example 3482364872364782
   */
  instanceId?: string;
  /**
   * MetaId is the id of the entity, is the same across all the different instances
   *
   * @example 8423876238756278
   */
  metaId?: string;
  /**
   * Last operation type
   *
   * @example commit
   */
  operation?: string;
  /**
   * This property contains the END of the period
   *
   * @format date-time
   */
  startDate?: string;
  /**
   * State of the instance (DISCARDERD, ARCHIVED, DRAFT, SUBMITTED, PUBLISHED)
   *
   * @example John
   */
  status?: "ARCHIVED" | "DISCARDED" | "DRAFT" | "SUBMITTED" | "PUBLISHED";
  /**
   * Mark an entity to be deleted when the fake instance in the approval process is published.
   *
   * @example true
   */
  toBeDelete?: string;
  uid?: string;
  /**
   * version tag
   *
   * @example 1.0
   */
  version?: string;
  /**
   * VersionId is the id of the instance
   *
   * @example 7346238746372
   */
  versionId?: string;
};

export type RemoveUserFromGroupBean = {
  groupid?: string;
  userid?: string;
};

export type SearchResponse = {
  errorMessage?: string;
  filters?: NodeFilters[];
  results?: Node;
};

export type Service = {
  description?: string;
  href?: string;
  id?: string;
  name?: string;
  provider?: string;
};

export type ServiceParameter = {
  defaultValue?: string;
  enumValue?: string[];
  label?: string;
  maxValue?: string;
  minValue?: string;
  multipleValue?: string;
  name?: string;
  ["null"]?: boolean;
  property?: string;
  readOnlyValue?: string;
  required?: boolean;
  type?: string;
  value?: string;
  valuePattern?: string;
  version?: string;
};

export type SoftwareApplicationParameter = {
  /**
   * This property contains the action at which the application may be installed.
   *
   * @example object or result
   */
  action?: string;
  /**
   * Comment of the user when on commit
   *
   * @example Example of comment
   */
  changeComment?: string;
  /**
   * AUTOGENERATED - Timestamp when the last change happened
   *
   * @format date-time
   */
  changeTimestamp?: string;
  /**
   * The parameter url to schema
   *
   * @example https://urltoschema
   */
  conformsto?: string;
  /**
   * AUTOGENERATED - MetaId of the editor
   *
   * @example 342374275648
   */
  editorId?: string;
  /**
   * This property contains the encodingformat of the Software Application Parameter
   *
   * @example application/json
   */
  encodingformat?: string;
  /**
   * AUTOGENERATED - If ingested it contains from which file it was ingested.
   *
   * @example file://file.ttl
   */
  fileProvenance?: string;
  /**
   * list of group ids which the entity belong
   */
  groups?: string[];
  /**
   * AUTOGENERATED - InstanceId of the previous version of the instance
   *
   * @example 232465346363
   */
  instanceChangedId?: string;
  /**
   * InstanceId is the id of the instance
   *
   * @example 3482364872364782
   */
  instanceId?: string;
  /**
   * MetaId is the id of the entity, is the same across all the different instances
   *
   * @example 8423876238756278
   */
  metaId?: string;
  /**
   * Last operation type
   *
   * @example commit
   */
  operation?: string;
  /**
   * State of the instance (DISCARDERD, ARCHIVED, DRAFT, SUBMITTED, PUBLISHED)
   *
   * @example John
   */
  status?: "ARCHIVED" | "DISCARDED" | "DRAFT" | "SUBMITTED" | "PUBLISHED";
  /**
   * Mark an entity to be deleted when the fake instance in the approval process is published.
   *
   * @example true
   */
  toBeDelete?: string;
  uid?: string;
  /**
   * version tag
   *
   * @example 1.0
   */
  version?: string;
  /**
   * VersionId is the id of the instance
   *
   * @example 7346238746372
   */
  versionId?: string;
};

export type SpatialInfo = {
  paths?: Record<string, any>[];
  /**
   * @format int32
   */
  wkid?: number;
  x?: Record<string, any>;
  y?: Record<string, any>;
};

export type TemporalCoverage = {
  endDate?: string;
  startDate?: string;
};

export type User = {
  /**
   * User identifier
   *
   * @example id234324543
   */
  authIdentifier?: string;
  /**
   * Email of the user
   *
   * @example email@email.com
   */
  email?: string;
  /**
   * Firstname of the user
   *
   * @example John
   */
  firstName?: string;
  /**
   * List of groups on which user belong to
   */
  groups?: UserGroup[];
  /**
   * Boolean, true if the user is a general admin
   *
   * @example true
   */
  isAdmin?: boolean;
  /**
   * Lastname of the user
   *
   * @example Doe
   */
  lastName?: string;
};

/**
 * List of groups on which user belong to
 */
export type UserGroup = {
  /**
   * Id of the group
   *
   * @example 342442
   */
  groupId?: string;
  /**
   * Role of the User in the group
   *
   * @example EDITOR
   */
  role?: "ADMIN" | "EDITOR" | "REVIEWER" | "VIEWER";
};

export type ValidationRule = {
  encodingFormat?: string;
  schemaVersion?: string;
  type?: string;
};

export type WebService = {
  /**
   * List of possible authentication/authorization methods supported.
   *
   * @example OAUTH
   */
  aaaiTypes?: string;
  /**
   * This property refers to a category of the Web Service. A Web Service may be associated with multiple categories.
   *
   * @example {"entityType":"CATEGORY","instanceId":"an UUID","metaId":"an UUID","uid":"an UUID"}
   */
  category?: LinkedEntity[];
  /**
   * Comment of the user when on commit
   *
   * @example Example of comment
   */
  changeComment?: string;
  /**
   * AUTOGENERATED - Timestamp when the last change happened
   *
   * @format date-time
   */
  changeTimestamp?: string;
  /**
   * This property contains contact information that can be used for sending comments about the Web Service.
   *
   * @example {"entityType":"CONTACTPOINT","instanceId":"an UUID","metaId":"an UUID","uid":"an UUID"}
   */
  contactPoint?: LinkedEntity[];
  /**
   * This property contains the most recent date on which the Web Service was modified.
   *
   * @format date-time
   */
  dateModified?: string;
  /**
   * This property contains the date of publication of the Web Service.
   *
   * @format date-time
   */
  datePublished?: string;
  /**
   * This property contains a free-text description of the Web Service.
   *
   * @example Webservice description text
   */
  description?: string;
  /**
   * Reverse reference to the related distribution.
   *
   * @example {"entityType":"DISTRIBUTION","instanceId":"an UUID","metaId":"an UUID","uid":"an UUID"}
   */
  distribution?: LinkedEntity[];
  /**
   * This property refers to the API documentation.
   *
   * @example {"entityType":"DOCUMENTATION","instanceId":"an UUID","metaId":"an UUID","uid":"an UUID"}
   */
  documentation?: LinkedEntity[];
  /**
   * AUTOGENERATED - MetaId of the editor
   *
   * @example 342374275648
   */
  editorId?: string;
  /**
   * This property refers to the API definitions (e.g., WSDL, WADL)
   *
   * @example https://entrypoint
   */
  entryPoint?: string;
  /**
   * AUTOGENERATED - If ingested it contains from which file it was ingested.
   *
   * @example file://file.ttl
   */
  fileProvenance?: string;
  /**
   * list of group ids which the entity belong
   */
  groups?: string[];
  /**
   * This property refers to identifiers of the Web Service, such as MAST/ADS, DataCite, DOI, EZID or W3ID.
   *
   * @example {"entityType":"IDENTIFIER","instanceId":"an UUID","metaId":"an UUID","uid":"an UUID"}
   */
  identifier?: LinkedEntity[];
  /**
   * AUTOGENERATED - InstanceId of the previous version of the instance
   *
   * @example 232465346363
   */
  instanceChangedId?: string;
  /**
   * InstanceId is the id of the instance
   *
   * @example 3482364872364782
   */
  instanceId?: string;
  /**
   * This property contains the keywords used to describe the Web Service. Multiple entries in a keywords list are typically delimited by commas.
   *
   * @example kw1,kw2
   */
  keywords?: string;
  /**
   * This property refers to the licence under which the Web Service can be used or reused.
   *
   * @example Apache2
   */
  license?: string;
  /**
   * MetaId is the id of the entity, is the same across all the different instances
   *
   * @example 8423876238756278
   */
  metaId?: string;
  /**
   * This property contains a name given to the Web Service.
   *
   * @example Webservice name
   */
  name?: string;
  /**
   * Last operation type
   *
   * @example commit
   */
  operation?: string;
  provider?: LinkedEntity;
  /**
   * It represents the link to another Epos resource.
   *
   * @example {"entityType":"ANY ENTITY","instanceId":"an UUID","metaId":"an UUID","uid":"an UUID"}
   */
  relation?: LinkedEntity[];
  /**
   * This property refers to a geographical area covered by the Web Service.
   *
   * @example {"entityType":"LOCATION","instanceId":"an UUID","metaId":"an UUID","uid":"an UUID"}
   */
  spatialExtent?: LinkedEntity[];
  /**
   * State of the instance (DISCARDERD, ARCHIVED, DRAFT, SUBMITTED, PUBLISHED)
   *
   * @example John
   */
  status?: "ARCHIVED" | "DISCARDED" | "DRAFT" | "SUBMITTED" | "PUBLISHED";
  /**
   * This property refers to a web service operation supported by the Web Service.
   *
   * @example {"entityType":"OPERATION","instanceId":"an UUID","metaId":"an UUID","uid":"an UUID"}
   */
  supportedOperation?: LinkedEntity[];
  /**
   * This property refers to a temporal period (i.e. startDate, endDate) that the Web Service covers.
   *
   * @example {"entityType":"PERIODOFTIME","instanceId":"an UUID","metaId":"an UUID","uid":"an UUID"}
   */
  temporalExtent?: LinkedEntity[];
  /**
   * Mark an entity to be deleted when the fake instance in the approval process is published.
   *
   * @example true
   */
  toBeDelete?: string;
  uid?: string;
  /**
   * version tag
   *
   * @example 1.0
   */
  version?: string;
  /**
   * VersionId is the id of the instance
   *
   * @example 7346238746372
   */
  versionId?: string;
};

export type WebserviceProcessing = {
  availableContactPoints?: AvailableContactPoints[];
  availableFormats?: AvailableFormat[];
  categories?: {
    [key: string]: string[];
  };
  dataProvider?: DataServiceProvider[];
  dependecyServices?: string[];
  description?: string;
  distributionid?: string;
  doi?: string[];
  downloadURL?: string;
  frequencyUpdate?: string;
  hasQualityAnnotation?: string;
  href?: string;
  id?: string;
  internalID?: string[];
  keywords?: string[];
  license?: string;
  methodEndpoint?: {
    [key: string]: string;
  };
  methodOperationId?: {
    [key: string]: string;
  };
  methodServiceParameters?: {
    [key: string]: ServiceParameter[];
  };
  productid?: string;
  scienceDomain?: string[];
  serviceDescription?: string;
  serviceName?: string;
  serviceProvider?: DataServiceProvider;
  serviceSpatial?: SpatialInfo;
  serviceTemporalCoverage?: TemporalCoverage;
  serviceType?: string[];
  spatial?: SpatialInfo;
  temporalCoverage?: TemporalCoverage;
  title?: string;
  type?: string;
  uid?: string;
};

export type MainHTTPError = {
  /**
   * @example can't connect to database
   */
  error?: string;
};

export type MainOK = {
  /**
   * @example sync started
   */
  message?: string;
};

export type ModelPlugin = {
  /**
   * arguments for the execution (if needed (like the main java class name))
   */
  arguments?: string;
  /**
   * a description of the plugin
   */
  description?: string;
  /**
   * if the plugin is enabled aka if it can be used
   */
  enabled?: boolean;
  /**
   * the path for the executable
   */
  executable?: string;
  /**
   * the id of the plugin (generated when the plugin is created)
   */
  id?: string;
  /**
   * if the plugin is currently installed
   */
  installed?: boolean;
  /**
   * the name of the plugin
   */
  name?: string;
  /**
   * the url from which to clone the repository
   */
  repository?: string;
  /**
   * the runtime (binary, java, python, ...)
   */
  runtime?: ModelSupportedRuntimes;
  /**
   * the name of the branch if version_type is branch or the tag number if it is tag
   */
  version?: string;
  /**
   * either 'branch' or 'tag'
   */
  version_type?: ModelVersionType;
};

export type ModelPluginRelation = {
  /**
   * the id of the relation (generated when the relation is created)
   */
  id?: string;
  /**
   * the file format expected by the plugin for the input
   */
  input_format?: string;
  /**
   * the file format expected as the output from the plugin execution
   */
  output_format?: string;
  /**
   * the id of the plugin (from the plugin table)
   */
  plugin_id?: string;
  /**
   * the instanceId of the distribution
   */
  relation_id?: string;
};

export type ModelSupportedRuntimes = "binary" | "java" | "python";

export type ModelVersionType = "branch" | "tag";

export type RoutesHTTPError = {
  /**
   * @example 400
   */
  code?: number;
  /**
   * @example status bad request
   */
  message?: string;
};

export type RoutesPlugin = {
  arguments?: string;
  description?: string;
  enabled?: boolean;
  executable?: string;
  name?: string;
  repository?: string;
  runtime?: ModelSupportedRuntimes;
  version?: string;
  version_type?: ModelVersionType;
};

export type RoutesPluginRelationUpdate = {
  input_format?: string;
  output_format?: string;
  plugin_id?: string;
  relation_id?: string;
};
